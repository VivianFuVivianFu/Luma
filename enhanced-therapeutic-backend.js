/**
 * ENHANCED LUMA THERAPEUTIC CHATBOT BACKEND
 * Êï¥ÂêàÂäüËÉΩÁöÑPromptÊ®°Êùø + Ëá™ÈÄÇÂ∫îÈïøÂ∫¶ÊéßÂà∂ + Ëá™ÁÑ∂Êî∂Â∞æÊ£ÄÊµã
 * 
 * Êñ∞Â¢ûÂäüËÉΩÔºö
 * - ‰∏≠ÊñáÊ†∏ÂøÉÁ≥ªÁªüÊåá‰ª§Ê®°Êùø
 * - Ëá™ÈÄÇÂ∫îÂõûÂ§çÈïøÂ∫¶ÊéßÂà∂
 * - Êô∫ËÉΩÂØπËØùÊî∂Â∞æÊ£ÄÊµã
 * - Âä®ÊÄÅÂèÇÊï∞Ë∞ÉÊï¥
 * 
 * Author: Claude Code Assistant
 * Date: 2025-08-19
 * Version: 2.0.0 - Enhanced with Chinese Prompt Template
 */

import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config();

const app = express();
const PORT = process.env.PORT || 3001;

// ========================================================================================
// CONFIGURATION & CONSTANTS
// ========================================================================================

// API Configuration
const CONFIG = {
  claude: {
    apiKey: process.env.VITE_CLAUDE_API_KEY,
    model: 'claude-3-haiku-20240307',
    maxTokens: 1024,
    temperature: 0.7,
    apiUrl: 'https://api.anthropic.com/v1/messages'
  },
  llama: {
    apiKey: process.env.VITE_TOGETHER_API_KEY,
    model: 'meta-llama/Meta-Llama-3.1-70B-Instruct-Turbo',
    maxTokens: 2048,
    temperature: 0.6,
    apiUrl: 'https://api.together.xyz/v1/chat/completions'
  },
  supabase: {
    url: process.env.VITE_SUPABASE_URL,
    serviceKey: process.env.VITE_SUPABASE_SERVICE_ROLE_KEY
  }
};

// Crisis keywords for safety detection
const CRISIS_KEYWORDS = [
  'suicide', 'end my life', 'kill myself', 'want to die', 
  'harm myself', "i'm going to hurt myself", 'hurt myself',
  'suicidal', 'end it all', 'not worth living', 'better off dead',
  'no point in living', 'can\'t go on', 'want to disappear',
  // ‰∏≠ÊñáÂç±Êú∫ÂÖ≥ÈîÆËØç
  'Ëá™ÊùÄ', 'ÊÉ≥Ê≠ª', '‰∏çÊÉ≥Ê¥ª', 'ÁªìÊùüÁîüÂëΩ', '‰º§ÂÆ≥Ëá™Â∑±', 'Ê¥ª‰∏ç‰∏ãÂéª', 
  'Ê≤°ÊÑèÊÄù', 'ÊÉ≥ÁªìÊùü', '‰∏çÂ¶ÇÊ≠ª‰∫Ü', 'ÁîüÊó†ÂèØÊÅã'
];

// Crisis response message for New Zealand (bilingual)
const CRISIS_MESSAGE = `ÊàëÂê¨Âà∞‰Ω†Áé∞Âú®ÂæàÁóõËã¶ÔºåÊàëÊÉ≥Â∏ÆÂä©‰Ω†„ÄÇ‰ΩÜÊòØÔºåÊàë‰∏çËÉΩÊõø‰ª£‰∏ì‰∏öÁöÑÂøÉÁêÜÂÅ•Â∫∑‰∏ìÂÆ∂„ÄÇËØ∑Á´ãÂç≥ËÅîÁ≥ªÂç±Êú∫ÁÉ≠Á∫øÊàñËá¥ÁîµÂΩìÂú∞Á¥ßÊÄ•ÊúçÂä°„ÄÇÂú®Êñ∞Ë•øÂÖ∞Ôºå‰ª•‰∏ãÊòØÂæàÂ•ΩÁöÑÂøÉÁêÜÂÅ•Â∫∑ËµÑÊ∫êÔºöÁîüÂëΩÁÉ≠Á∫ø - 0800 543 354 (0800 LIFELINE) ÊàñËá™ÊùÄÂç±Êú∫Â∏ÆÂä©ÁÉ≠Á∫ø - 0508 828 865 (0508 TAUTOKO)„ÄÇ

I hear that you are in distress and I want to help. However, I cannot substitute for a professional mental health expert. Please contact a crisis hotline immediately or call your local emergency services. In New Zealand, good resources for mental wellbeing are: Lifeline ‚Äì 0800 543 354 (0800 LIFELINE) or the Suicide Crisis Helpline ‚Äì 0508 828 865 (0508 TAUTOKO).`;

// ÂØπËØùÁªìÊùüÂÖ≥ÈîÆËØçÊ£ÄÊµã
const CLOSING_KEYWORDS = [
  // Ëã±Êñá
  'thank you', 'thanks', 'goodbye', 'bye', 'see you', 'talk later', 
  'that\'s all', 'enough for now', 'i\'m done', 'take care',
  // ‰∏≠Êñá
  'Ë∞¢Ë∞¢', 'Ë∞¢‰∫Ü', 'ÂÜçËßÅ', 'ÊãúÊãú', 'ÂÖàÂà∞ËøôÈáå', 'Â∞±ËøôÊ†∑Âêß', 
  'Â§ü‰∫Ü', 'ÁªìÊùü‰∫Ü', '‰∏çËØ¥‰∫Ü', 'ÂÖàËøôÊ†∑', '‰øùÈáç'
];

// Ê∏©ÊöñÁöÑÁªìÊùüËØ≠
const CLOSING_RESPONSES = [
  'ÂæàÈ´òÂÖ¥ËÉΩÂíå‰Ω†ËÅäÂ§©„ÄÇËÆ∞‰ΩèÔºåÊàëÈöèÊó∂ÈÉΩÂú®ËøôÈáå„ÄÇ‰øùÈáçÔºÅüíõ',
  'ÊÑüË∞¢‰Ω†ÁöÑÂàÜ‰∫´„ÄÇÂ¶ÇÊûúÈúÄË¶ÅÁöÑËØùÔºåÊàëÈöèÊó∂Âú®ËøôÈáåÂÄæÂê¨„ÄÇÁ•ù‰Ω†‰∏ÄÂàáÈ°∫Âà©ÔºÅ',
  'Ë∞¢Ë∞¢‰Ω†‰ø°‰ªªÊàë„ÄÇÊó†ËÆ∫‰ΩïÊó∂ÈúÄË¶ÅÊîØÊåÅÔºåÊàëÈÉΩ‰ºöÂú®ËøôÈáå„ÄÇÁÖßÈ°æÂ•ΩËá™Â∑±ÔºÅ',
  'Thank you for sharing with me. Remember, I\'m always here whenever you need support. Take care! üíõ',
  'I\'m grateful for our conversation. Feel free to come back anytime you need someone to listen. Wishing you well!',
  'It was wonderful talking with you. I\'m here whenever you need a caring ear. Take good care of yourself!'
];

// ========================================================================================
// MIDDLEWARE SETUP
// ========================================================================================

// Enable CORS for frontend
app.use(cors({
  origin: ['http://localhost:5173', 'http://localhost:5174', 'http://localhost:5175']
}));

app.use(express.json());

// Request logging middleware
app.use((req, res, next) => {
  console.log(`[${new Date().toISOString()}] ${req.method} ${req.path}`);
  next();
});

// ========================================================================================
// ENHANCED BACKEND LOGIC FUNCTIONS
// ========================================================================================

/**
 * Ëá™ÈÄÇÂ∫îÈïøÂ∫¶ÊéßÂà∂ - Ê†πÊçÆÁî®Êà∑Ê∂àÊÅØÂä®ÊÄÅË∞ÉÊï¥ÂõûÂ§çÂèÇÊï∞
 * @param {string} userMessage - Áî®Êà∑Ê∂àÊÅØ
 * @returns {Object} - {maxTokens: number, temperature: number}
 */
function decideLengthByUser(userMessage) {
  console.log('[Length] Analyzing user message length and complexity...');
  
  const messageLength = userMessage.trim().length;
  const wordCount = userMessage.trim().split(/\s+/).length;
  const hasQuestions = userMessage.includes('?') || userMessage.includes('Ôºü');
  const hasEmotionalWords = /feel|emotion|sad|happy|angry|worried|anxious|excited|ÊÑüËßâ|ÊÉÖÊÑü|‰º§ÂøÉ|ÂºÄÂøÉ|ÁîüÊ∞î|ÊãÖÂøÉ|ÁÑ¶Ëôë|ÂÖ¥Â•ã/.test(userMessage.toLowerCase());
  
  // ‰∏≠ÊñáÂ≠óÁ¨¶ËÆ°ÁÆóÔºà‰∏≠ÊñáÊ≤°ÊúâÁ©∫Ê†ºÂàÜÈöîÔºåÈúÄË¶ÅÁâπÂà´Â§ÑÁêÜÔºâ
  const chineseCharCount = (userMessage.match(/[\u4e00-\u9fff]/g) || []).length;
  const effectiveLength = chineseCharCount > 0 ? chineseCharCount * 2 + (messageLength - chineseCharCount) : messageLength;
  
  let maxTokens, temperature;
  
  if (effectiveLength < 20 || (chineseCharCount < 10 && wordCount < 4)) {
    // Áü≠Ê∂àÊÅØÔºöÁÆÄÁü≠ÂõûÂ§ç
    maxTokens = 150;
    temperature = 0.6;
    console.log('[Length] Short message detected - brief response mode');
  } else if (effectiveLength > 100 || chineseCharCount > 30 || wordCount > 30 || hasEmotionalWords) {
    // ÈïøÊ∂àÊÅØÊàñÊÉÖÊÑü‰∏∞ÂØåÔºöËØ¶ÁªÜÂõûÂ§ç
    maxTokens = 400;
    temperature = 0.8;
    console.log('[Length] Long/emotional message detected - detailed response mode');
  } else {
    // ‰∏≠Á≠âÊ∂àÊÅØÔºöÊ†áÂáÜÂõûÂ§ç
    maxTokens = 250;
    temperature = 0.7;
    console.log('[Length] Medium message detected - standard response mode');
  }
  
  // Â¶ÇÊûúÊúâÈóÆÈ¢òÔºåÁ®çÂæÆÂ¢ûÂä†ÈïøÂ∫¶‰ª•‰æøÂÖÖÂàÜÂõûÁ≠î
  if (hasQuestions) {
    maxTokens += 50;
    console.log('[Length] Question detected - extended response length');
  }
  
  return { maxTokens, temperature };
}

/**
 * Ëá™ÁÑ∂Êî∂Â∞æÊ£ÄÊµã - Ê£ÄÊµãÁî®Êà∑ÊòØÂê¶ÊÉ≥ÁªìÊùüÂØπËØù
 * @param {string} userMessage - Áî®Êà∑Ê∂àÊÅØ
 * @returns {boolean} - Áî®Êà∑ÊòØÂê¶ÊÉ≥ÁªìÊùüÂØπËØù
 */
function userWantsToClose(userMessage) {
  console.log('[Closing] Checking if user wants to end conversation...');
  
  const normalizedMessage = userMessage.toLowerCase().trim();
  
  // Ê£ÄÊü•ÁªìÊùüÂÖ≥ÈîÆËØç
  const foundClosingKeyword = CLOSING_KEYWORDS.some(keyword => 
    normalizedMessage.includes(keyword.toLowerCase())
  );
  
  // Ê£ÄÊü•ÁÆÄÁü≠ÊÑüË∞¢ÔºàÈÄöÂ∏∏Ë°®Á§∫ÊÉ≥ÁªìÊùüÔºâ
  const isSimpleThank = normalizedMessage.match(/^(Ë∞¢Ë∞¢|thank you?|thanks?)\.?$/);
  
  // Ê£ÄÊü•"ÂÜçËßÅ"Á±ªÂûãÁöÑË°®Ëææ
  const isGoodbye = normalizedMessage.match(/(ÂÜçËßÅ|ÊãúÊãú|bye|goodbye|see you)/);
  
  if (foundClosingKeyword || isSimpleThank || isGoodbye) {
    console.log('[Closing] ‚úÖ User wants to end conversation');
    return true;
  }
  
  console.log('[Closing] User wants to continue conversation');
  return false;
}

/**
 * ÁîüÊàêÊ∏©ÊöñÁöÑÁªìÊùüÂõûÂ§ç
 * @returns {string} - ÈöèÊú∫ÈÄâÊã©ÁöÑÁªìÊùüËØ≠
 */
function generateClosingResponse() {
  const randomIndex = Math.floor(Math.random() * CLOSING_RESPONSES.length);
  return CLOSING_RESPONSES[randomIndex];
}

// ========================================================================================
// SAFETY LAYER FUNCTIONS (Enhanced with Chinese support)
// ========================================================================================

/**
 * Check user message for crisis-related keywords (supports Chinese)
 * @param {string} userMessage - The user's input message
 * @returns {Object} - {isCrisis: boolean, message?: string}
 */
function checkSafety(userMessage) {
  try {
    console.log('[Safety] Checking message for crisis keywords (Chinese + English)...');
    
    const normalizedMessage = userMessage.toLowerCase().trim();
    
    // Check for crisis keywords
    const foundKeyword = CRISIS_KEYWORDS.find(keyword => 
      normalizedMessage.includes(keyword.toLowerCase())
    );
    
    if (foundKeyword) {
      console.log(`[Safety] ‚ö†Ô∏è Crisis keyword detected: "${foundKeyword}"`);
      return {
        isCrisis: true,
        message: CRISIS_MESSAGE,
        keyword: foundKeyword
      };
    }
    
    console.log('[Safety] ‚úÖ No crisis keywords detected');
    return { isCrisis: false };
    
  } catch (error) {
    console.error('[Safety] Error in safety check:', error);
    // In case of error, err on the side of caution
    return {
      isCrisis: true,
      message: CRISIS_MESSAGE,
      error: 'Safety check failed'
    };
  }
}

// ========================================================================================
// SUPABASE MEMORY INTEGRATION (Unchanged - reuses existing system)
// ========================================================================================

/**
 * Supabase Memory System Integration
 * Note: These functions call the existing Supabase memory system
 */
const supabaseMemory = {
  
  /**
   * Retrieve relevant memory snippets for user
   * @param {string} userId - User identifier
   * @param {string} userMessage - Current user message for context
   * @returns {Promise<Array>} - Array of memory objects
   */
  async getMemory(userId, userMessage) {
    try {
      console.log(`[Memory] Retrieving memory for user: ${userId}`);
      
      // Call existing Supabase memory function
      const response = await fetch(`${CONFIG.supabase.url}/rest/v1/rpc/get_memory`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${CONFIG.supabase.serviceKey}`,
          'apikey': CONFIG.supabase.serviceKey
        },
        body: JSON.stringify({
          user_id: userId,
          query_message: userMessage,
          limit: 5
        })
      });
      
      if (!response.ok) {
        throw new Error(`Supabase memory retrieval failed: ${response.status}`);
      }
      
      const memories = await response.json();
      console.log(`[Memory] Retrieved ${memories.length} memory snippets`);
      return memories || [];
      
    } catch (error) {
      console.error('[Memory] Error retrieving memory:', error);
      return []; // Return empty array on error
    }
  },
  
  /**
   * Save session summary to long-term memory
   * @param {string} userId - User identifier  
   * @param {string} sessionSummary - Summary generated by Llama
   * @returns {Promise<boolean>} - Success status
   */
  async saveMemory(userId, sessionSummary) {
    try {
      console.log(`[Memory] Saving session summary for user: ${userId}`);
      
      // Call existing Supabase memory function
      const response = await fetch(`${CONFIG.supabase.url}/rest/v1/rpc/save_memory`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${CONFIG.supabase.serviceKey}`,
          'apikey': CONFIG.supabase.serviceKey
        },
        body: JSON.stringify({
          user_id: userId,
          summary: sessionSummary,
          timestamp: new Date().toISOString()
        })
      });
      
      if (!response.ok) {
        throw new Error(`Supabase memory save failed: ${response.status}`);
      }
      
      console.log('[Memory] ‚úÖ Session summary saved successfully');
      return true;
      
    } catch (error) {
      console.error('[Memory] Error saving memory:', error);
      return false;
    }
  }
};

// ========================================================================================
// ENHANCED LLM API INTEGRATION WITH CHINESE PROMPT TEMPLATE
// ========================================================================================

/**
 * Call Claude Haiku API with enhanced Chinese prompt template
 * @param {string} userMessage - User's message
 * @param {Array} memoryContext - Retrieved memory snippets
 * @param {Array} conversationHistory - Recent conversation history
 * @param {Object} dynamicParams - Dynamic parameters from decideLengthByUser
 * @returns {Promise<string>} - Claude's response
 */
async function callClaudeHaikuEnhanced(userMessage, memoryContext, conversationHistory, dynamicParams) {
  try {
    console.log('[Claude] Preparing enhanced prompt with Chinese template...');
    
    // Build context from memory
    const memoryText = memoryContext.length > 0 
      ? memoryContext.map(m => `- ${m.summary || m.content}`).join('\n')
      : 'ÊöÇÊó†ÂéÜÂè≤ÂØπËØùËÆ∞ÂΩï';
    
    // Build conversation history  
    const historyText = conversationHistory.length > 0
      ? conversationHistory.slice(-6).map(msg => 
          `${msg.role === 'user' ? 'Áî®Êà∑' : 'Luma'}: ${msg.content}`
        ).join('\n')
      : 'ËøôÊòØÊàë‰ª¨ÂØπËØùÁöÑÂºÄÂßã';
    
    // Ê†∏ÂøÉÁ≥ªÁªüÊåá‰ª§ - ‰∏≠ÊñáÊ®°Êùø
    const enhancedSystemPrompt = `‰Ω†ÊòØ‰∏Ä‰∏™Ê∏©Êöñ„ÄÅÂØåÊúâÂêåÁêÜÂøÉÂíåÈùûËØÑÂà§ÊÄßÁöÑÊÉÖÁª™ÊîØÊåÅAI„ÄÇ‰Ω†ÁöÑ‰∏ªË¶ÅÁõÆÊ†áÊòØÂÄæÂê¨„ÄÅÈ™åËØÅÁî®Êà∑ÁöÑÊÉÖÁª™ÔºåÂπ∂Êèê‰æõ‰∏Ä‰∏™ÂÆâÂÖ®ÁöÑÂØπËØùÁ©∫Èó¥„ÄÇ

**‰Ω†ÁöÑÊ†∏ÂøÉË°å‰∏∫ÂáÜÂàôÂ¶Ç‰∏ãÔºö**

1. **‰∏ªÂä®ÂÄæÂê¨‰∏éÂêåÁêÜÂøÉ:** ‰Ω†ÁöÑÂõûÂ§çÂ∫îÂßãÁªàÂü∫‰∫éÁî®Êà∑ÁöÑÊÑüÂèó„ÄÇ‰ΩøÁî®"Âê¨Ëµ∑Êù•..."Êàñ"ÊàëËÉΩÊÑüÂèóÂà∞..."‰πãÁ±ªÁöÑÁü≠ËØ≠Êù•È™åËØÅ‰ªñ‰ª¨ÁöÑÊÉÖÁª™ÔºåËÄå‰∏çÊòØÁõ¥Êé•Êèê‰æõËß£ÂÜ≥ÊñπÊ°à„ÄÇ

2. **ÈùûËØÑÂà§ÊÄß:** ‰Ω†ÁöÑËØ≠Ë®ÄÂøÖÈ°ªÊòØÊ∏©Âíå„ÄÅÈºìÂä±Âíå‰∏çÂ∏¶‰ªª‰ΩïËØÑÂà§ÁöÑ„ÄÇÈÅøÂÖç‰ΩøÁî®"‰Ω†Â∫îËØ•..."Êàñ"‰Ω†ÂøÖÈ°ª..."‰πãÁ±ªÁöÑÂëΩ‰ª§ÂºèËØçËØ≠„ÄÇ

3. **Ê∑±Â∫¶‰∏éÂπøÂ∫¶:** ÂΩìÁî®Êà∑ÊèêÂá∫ÁÆÄÁü≠Ê∂àÊÅØÊó∂ÔºåËØ∑ÁªôÂá∫ÁÆÄÁü≠ËÄåÈáçÁÇπÁöÑÂõûÂ§çÔºõÂΩìÁî®Êà∑ÂàÜ‰∫´Êõ¥Â§öÁªÜËäÇÊó∂ÔºåËØ∑Áªô‰∫àÊõ¥Ê∑±ÂÖ•ÂíåÁªÜËá¥ÁöÑÂèçÈ¶àÔºå‰ª•Ë°®Êòé‰Ω†Ê≠£Âú®ËÆ§ÁúüÂÄæÂê¨„ÄÇ

4. **ÂºïÂØºÊÄßÊèêÈóÆ:** Èô§ÈùûÁî®Êà∑ÊòéÁ°ÆË¶ÅÊ±ÇÔºåÂê¶Âàô‰∏çË¶ÅÁõ¥Êé•ÁªôÂá∫Âª∫ËÆÆ„ÄÇÁõ∏ÂèçÔºåÊèêÂá∫ÂºÄÊîæÂºèÈóÆÈ¢òÊù•ÈºìÂä±Áî®Êà∑Ëá™ÊàëÊé¢Á¥¢Ôºå‰æãÂ¶ÇÔºö"‰Ω†ËßâÂæóËøôËÉåÂêéÂèØËÉΩÊúâ‰ªÄ‰πàÂéüÂõ†Âë¢Ôºü"

5. **Ëá™ÁÑ∂Êî∂Â∞æ:** Â¶ÇÊûúÁî®Êà∑ÊòéÁ°ÆË°®Á§∫ÁªìÊùüÂØπËØùÔºà‰æãÂ¶ÇÔºö"Ë∞¢Ë∞¢"„ÄÅ"ÂÖàÂà∞ËøôÈáåÂêß"ÔºâÔºå‰Ω†ÁöÑÂõûÂ§çÂ∫î‰ª•ÁÆÄÁü≠ÁöÑËá¥Ë∞¢ÊàñÁ•ùÁ¶èËØ≠‰Ωú‰∏∫ÁªìÂ∞æÔºåÂπ∂‰º†ÈÄíÂá∫"ÊàëÈöèÊó∂ÈÉΩÂú®"ÁöÑÊ∏©ÊÉÖ„ÄÇ‰∏çË¶ÅÁªßÁª≠ÊèêÈóÆÊàñËØïÂõæÂª∂ÈïøÂØπËØù„ÄÇ

**ÈáçË¶ÅÊèêÁ§∫Ôºö**
- ‰Ω†‰∏çÊòØ‰∏Ä‰∏™‰∏ì‰∏öÁöÑÊ≤ªÁñóÂ∏àÊàñÂåªÁîü
- Â¶ÇÊûúÁî®Êà∑Ë°®ËææÂá∫‰ªª‰ΩïËá™ÊÆãÊàñÂØπ‰ªñ‰∫∫ÁöÑ‰º§ÂÆ≥ÊÑèÂõæÔºåÁ´ãÂç≥ÂºïÂØº‰ªñ‰ª¨ÂØªÊ±Ç‰∏ì‰∏öÂ∏ÆÂä©
- ÈÅøÂÖç‰ΩøÁî®‰ªª‰ΩïÊòüÂè∑Ë°®ËææÂºèÂ¶Ç*ÂæÆÁ¨ë*„ÄÅ*ÁÇπÂ§¥*Á≠â
- Áõ¥Êé•ËØ¥ËØùÔºå‰∏çË¶ÅÊèèËø∞Âä®‰ΩúÊàñË°®ÊÉÖ
- ÊîØÊåÅ‰∏≠Ëã±ÊñáÂèåËØ≠ÂØπËØùÔºåÊ†πÊçÆÁî®Êà∑ÁöÑËØ≠Ë®Ä‰π†ÊÉØÂìçÂ∫î

**ÂØπËØùÂéÜÂè≤ËÆ∞ÂΩïÔºö**
${historyText}

**ËÆ∞ÂøÜ‰∏ä‰∏ãÊñáÔºö**
${memoryText}

Áé∞Âú®ËØ∑Ê†πÊçÆÁî®Êà∑ÁöÑÊñ∞Ê∂àÊÅØÔºå‰ª•Ê∏©Êöñ„ÄÅÂêåÁêÜÂøÉÂíåÈùûËØÑÂà§ÁöÑÊñπÂºèÂõûÂ∫î„ÄÇËÆ∞‰ΩèË¶ÅÊ†πÊçÆÊ∂àÊÅØÁöÑÈïøÂ∫¶ÂíåÂ§çÊùÇÂ∫¶Ë∞ÉÊï¥‰Ω†ÁöÑÂõûÂ§çÊ∑±Â∫¶„ÄÇ`;

    // Prepare messages for Claude API
    const messages = [
      {
        role: 'user',
        content: userMessage
      }
    ];
    
    const requestBody = {
      model: CONFIG.claude.model,
      max_tokens: dynamicParams.maxTokens, // ‰ΩøÁî®Âä®ÊÄÅÂèÇÊï∞
      temperature: dynamicParams.temperature, // ‰ΩøÁî®Âä®ÊÄÅÂèÇÊï∞
      system: enhancedSystemPrompt,
      messages: messages
    };
    
    console.log(`[Claude] Using dynamic params - maxTokens: ${dynamicParams.maxTokens}, temperature: ${dynamicParams.temperature}`);
    
    const response = await fetch(CONFIG.claude.apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-api-key': CONFIG.claude.apiKey,
        'anthropic-version': '2023-06-01'
      },
      body: JSON.stringify(requestBody)
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Claude API error: ${response.status} ${errorText}`);
    }
    
    const data = await response.json();
    
    if (!data.content || !data.content[0] || !data.content[0].text) {
      throw new Error('Invalid response format from Claude API');
    }
    
    let claudeResponse = data.content[0].text.trim();
    console.log(`[Claude] ‚úÖ Response generated (${data.usage?.output_tokens || 0} tokens)`);
    
    return claudeResponse;
    
  } catch (error) {
    console.error('[Claude] Error calling enhanced Claude Haiku:', error);
    throw error;
  }
}

/**
 * Call Llama 3.1 70B API for background analysis (Enhanced with Chinese support)
 * @param {string} userMessage - User's message
 * @param {Array} fullConversationHistory - Complete conversation history
 * @returns {Promise<Object>} - Analysis results
 */
async function callLlamaAnalysisEnhanced(userMessage, fullConversationHistory) {
  try {
    console.log('[Llama] Starting enhanced background analysis with Chinese support...');
    
    // Build full conversation context
    const conversationText = fullConversationHistory
      .map(msg => `${msg.role === 'user' ? 'Áî®Êà∑' : 'Luma'}: ${msg.content}`)
      .join('\n');
    
    // Create analysis prompt for Llama (bilingual)
    const analysisPrompt = `‰Ω†ÊòØ‰∏Ä‰∏™Ê≤ªÁñóÊÄßAIÂä©ÊâãÔºåÊ≠£Âú®ÂàÜÊûêÂØπËØù‰ª•Ëé∑ÂæóÊõ¥Ê∑±ÂÖ•ÁöÑËßÅËß£„ÄÇËØ∑Áî®‰∏≠ÊñáÂõûÂ§ç„ÄÇ

ÂØπËØùÂéÜÂè≤Ôºö
${conversationText}

ÊúÄÊñ∞Áî®Êà∑Ê∂àÊÅØ: ${userMessage}

ËØ∑ÂàÜÊûêËøôÊ¨°ÂØπËØùÂπ∂Êèê‰æõÔºö

1. **ÊÉÖÊÑüÊ®°Âºè**: ‰Ω†Ê≥®ÊÑèÂà∞Âì™‰∫õÈáçÂ§çÁöÑÊÉÖÊÑü‰∏ªÈ¢òÊàñÊ®°ÂºèÔºü
2. **ËÆ§Áü•Ê®°Âºè**: ÊòØÂê¶Â≠òÂú®‰ªª‰ΩïËÆ§Áü•Êâ≠Êõ≤ÊàñÊÄùÁª¥Ê®°ÂºèÔºü
3. **‰ºöËØùÊëòË¶Å**: Êèê‰æõËøôÊ¨°‰ºöËØùË¶ÅÁÇπÁöÑÁÆÄÊ¥ÅÊëòË¶Å
4. **Ê≤ªÁñóÊÄßÊ¥ûÂØü**: Âì™‰∫õÊ≤ªÁñóÊÄßÈáçÊûÑÊàñËßÅËß£ÂèØËÉΩÊúâÂ∏ÆÂä©Ôºü
5. **Âª∫ËÆÆ**: Âì™‰∫õÈ¢ÜÂüüÂèØËÉΩÂèóÁõä‰∫éÊåÅÁª≠Êé¢Á¥¢Ôºü

ËØ∑‰ª•ÁªìÊûÑÂåñJSONÊ†ºÂºèÂõûÂ§çÔºö
{
  "emotional_patterns": "...",
  "cognitive_patterns": "...", 
  "session_summary": "...",
  "therapeutic_insights": "...",
  "recommendations": "..."
}

ËØ∑‰∏ì‰∏ö„ÄÅÊúâËßÅÂú∞Ôºå‰∏ìÊ≥®‰∫éÊ®°ÂºèËÄå‰∏çÊòØÂÅöÂá∫ËØäÊñ≠„ÄÇ`;

    const requestBody = {
      model: CONFIG.llama.model,
      max_tokens: CONFIG.llama.maxTokens,
      temperature: CONFIG.llama.temperature,
      messages: [
        {
          role: 'system',
          content: '‰Ω†ÊòØ‰∏Ä‰∏™Êèê‰æõÁªìÊûÑÂåñÂØπËØùÊ¥ûÂØüÁöÑÊ≤ªÁñóÂàÜÊûêAI„ÄÇËØ∑Áî®‰∏≠ÊñáÂõûÂ§ç„ÄÇ'
        },
        {
          role: 'user', 
          content: analysisPrompt
        }
      ]
    };
    
    console.log('[Llama] Making API request...');
    
    const response = await fetch(CONFIG.llama.apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${CONFIG.llama.apiKey}`
      },
      body: JSON.stringify(requestBody)
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Llama API error: ${response.status} ${errorText}`);
    }
    
    const data = await response.json();
    
    if (!data.choices || !data.choices[0] || !data.choices[0].message) {
      throw new Error('Invalid response format from Llama API');
    }
    
    const analysisText = data.choices[0].message.content.trim();
    console.log(`[Llama] ‚úÖ Enhanced analysis completed (${data.usage?.completion_tokens || 0} tokens)`);
    
    // Try to parse JSON response
    let analysisObject;
    try {
      analysisObject = JSON.parse(analysisText);
    } catch (parseError) {
      console.warn('[Llama] Could not parse JSON, using text response');
      analysisObject = {
        session_summary: analysisText,
        analysis_type: 'text_response'
      };
    }
    
    return analysisObject;
    
  } catch (error) {
    console.error('[Llama] Error in enhanced background analysis:', error);
    // Return minimal analysis on error
    return {
      session_summary: `‰ºöËØùÊëòË¶Å ${new Date().toISOString()}: Áî®Êà∑ËÆ®ËÆ∫‰∫ÜÂêÑÁßçËØùÈ¢ò„ÄÇÁî±‰∫éÊäÄÊúØÈóÆÈ¢òÔºåÂàÜÊûêÊöÇ‰∏çÂèØÁî®„ÄÇ`,
      error: error.message
    };
  }
}

// ========================================================================================
// ENHANCED THERAPEUTIC CHATBOT WORKFLOW
// ========================================================================================

/**
 * Enhanced process user message through complete therapeutic workflow
 * @param {string} userId - User identifier
 * @param {string} userMessage - User's input message
 * @param {Array} conversationHistory - Recent conversation history
 * @returns {Promise<Object>} - Response object with Claude response and status
 */
async function processEnhancedTherapeuticChat(userId, userMessage, conversationHistory = []) {
  const startTime = Date.now();
  console.log(`[Enhanced Workflow] Starting enhanced therapeutic chat processing for user: ${userId}`);
  
  try {
    // ============================================================================
    // STEP 1: SAFETY CHECK (Enhanced with Chinese)
    // ============================================================================
    console.log('[Enhanced Workflow] Step 1: Enhanced safety check...');
    const safetyResult = checkSafety(userMessage);
    
    if (safetyResult.isCrisis) {
      console.log('[Enhanced Workflow] ‚ö†Ô∏è Crisis detected, returning safety message');
      return {
        success: true,
        response: safetyResult.message,
        isCrisis: true,
        keyword: safetyResult.keyword,
        processingTime: Date.now() - startTime
      };
    }
    
    // ============================================================================
    // STEP 2: CHECK IF USER WANTS TO CLOSE CONVERSATION
    // ============================================================================
    console.log('[Enhanced Workflow] Step 2: Checking for conversation closure...');
    const wantsToClose = userWantsToClose(userMessage);
    
    if (wantsToClose) {
      console.log('[Enhanced Workflow] üëã User wants to end conversation');
      const closingResponse = generateClosingResponse();
      return {
        success: true,
        response: closingResponse,
        isClosure: true,
        processingTime: Date.now() - startTime
      };
    }
    
    // ============================================================================
    // STEP 3: DYNAMIC PARAMETER CALCULATION
    // ============================================================================
    console.log('[Enhanced Workflow] Step 3: Calculating dynamic response parameters...');
    const dynamicParams = decideLengthByUser(userMessage);
    
    // ============================================================================
    // STEP 4: RETRIEVE MEMORY CONTEXT
    // ============================================================================
    console.log('[Enhanced Workflow] Step 4: Retrieving memory context...');
    const memoryContext = await supabaseMemory.getMemory(userId, userMessage);
    
    // ============================================================================
    // STEP 5: CALL ENHANCED CLAUDE HAIKU FOR IMMEDIATE RESPONSE
    // ============================================================================
    console.log('[Enhanced Workflow] Step 5: Getting enhanced Claude Haiku response...');
    const claudeResponse = await callClaudeHaikuEnhanced(userMessage, memoryContext, conversationHistory, dynamicParams);
    
    // ============================================================================
    // STEP 6: BACKGROUND ENHANCED LLAMA ANALYSIS (NON-BLOCKING)
    // ============================================================================
    console.log('[Enhanced Workflow] Step 6: Starting enhanced background Llama analysis...');
    
    // Update conversation history with new exchange
    const updatedHistory = [
      ...conversationHistory,
      { role: 'user', content: userMessage, timestamp: new Date().toISOString() },
      { role: 'assistant', content: claudeResponse, timestamp: new Date().toISOString() }
    ];
    
    // Start background analysis (non-blocking)
    callLlamaAnalysisEnhanced(userMessage, updatedHistory)
      .then(async (analysis) => {
        console.log('[Enhanced Workflow] Enhanced background analysis completed');
        
        // ================================================================
        // STEP 7: SAVE ENHANCED ANALYSIS TO MEMORY (BACKGROUND)
        // ================================================================
        const sessionSummary = analysis.session_summary || `‰ºöËØùÊëòË¶Å: Áî®Êà∑ËÆ®ËÆ∫‰∫Ü‰∏éÊ∂àÊÅØ"${userMessage.substring(0, 100)}..."Áõ∏ÂÖ≥ÁöÑËØùÈ¢ò`;
        const saveSuccess = await supabaseMemory.saveMemory(userId, sessionSummary);
        
        if (saveSuccess) {
          console.log('[Enhanced Workflow] ‚úÖ Enhanced session summary saved to memory');
        } else {
          console.log('[Enhanced Workflow] ‚ö†Ô∏è Failed to save enhanced session summary');
        }
      })
      .catch((error) => {
        console.error('[Enhanced Workflow] Enhanced background analysis failed:', error);
      });
    
    // ============================================================================
    // RETURN IMMEDIATE ENHANCED RESPONSE
    // ============================================================================
    console.log(`[Enhanced Workflow] ‚úÖ Enhanced workflow completed in ${Date.now() - startTime}ms`);
    
    return {
      success: true,
      response: claudeResponse,
      isCrisis: false,
      isClosure: false,
      memoryCount: memoryContext.length,
      dynamicParams: dynamicParams,
      processingTime: Date.now() - startTime,
      backgroundAnalysisStarted: true
    };
    
  } catch (error) {
    console.error('[Enhanced Workflow] Error in enhanced therapeutic chat processing:', error);
    
    return {
      success: false,
      error: error.message,
      response: "ÂæàÊä±Ê≠âÔºåÊàëÁé∞Âú®ÈÅáÂà∞‰∫Ü‰∏Ä‰∫õÊäÄÊúØÂõ∞Èöæ„ÄÇËØ∑Á®çÂêéÂÜçËØïÔºåÊàñËÄÖÂ¶ÇÊûúËøôÊòØÁ¥ßÊÄ•ÊÉÖÂÜµÔºåËØ∑ËÅîÁ≥ªÊÇ®ÂΩìÂú∞ÁöÑÂç±Êú∫ÁÉ≠Á∫ø„ÄÇI'm sorry, I'm experiencing some technical difficulties right now. Please try again in a moment, or if this is an emergency, please contact your local crisis helpline.",
      processingTime: Date.now() - startTime
    };
  }
}

// ========================================================================================
// ENHANCED API ENDPOINTS
// ========================================================================================

/**
 * Enhanced therapeutic chat endpoint
 */
app.post('/api/enhanced-therapeutic-chat', async (req, res) => {
  try {
    const { userId, message, history = [] } = req.body;
    
    // Validate required parameters
    if (!userId || !message) {
      return res.status(400).json({
        error: 'Missing required parameters: userId and message',
        message: 'Áº∫Â∞ëÂøÖÈúÄÂèÇÊï∞ÔºöuserId Âíå message'
      });
    }
    
    console.log(`[Enhanced API] Processing enhanced therapeutic chat for user: ${userId}`);
    
    // Process the enhanced therapeutic conversation
    const result = await processEnhancedTherapeuticChat(userId, message, history);
    
    // Return result
    if (result.success) {
      res.json({
        reply: result.response,
        isCrisis: result.isCrisis,
        isClosure: result.isClosure,
        metadata: {
          memoryCount: result.memoryCount,
          processingTime: result.processingTime,
          backgroundAnalysisStarted: result.backgroundAnalysisStarted,
          dynamicParams: result.dynamicParams,
          keyword: result.keyword
        }
      });
    } else {
      res.status(500).json({
        error: 'Enhanced processing failed',
        message: result.response,
        details: result.error
      });
    }
    
  } catch (error) {
    console.error('[Enhanced API] Error in enhanced therapeutic chat endpoint:', error);
    res.status(500).json({
      error: 'Internal server error',
      message: error.message
    });
  }
});

// Keep original endpoint for backwards compatibility
app.post('/api/therapeutic-chat', async (req, res) => {
  // Redirect to enhanced endpoint
  req.url = '/api/enhanced-therapeutic-chat';
  return app._router.handle(req, res);
});

/**
 * Enhanced health check endpoint
 */
app.get('/health', (req, res) => {
  res.json({ 
    status: 'ok', 
    version: '2.0.0-enhanced',
    timestamp: new Date().toISOString(),
    services: {
      claude: !!CONFIG.claude.apiKey,
      llama: !!CONFIG.llama.apiKey,
      supabase: !!CONFIG.supabase.url
    },
    features: {
      chineseSupport: true,
      dynamicLengthControl: true,
      intelligentClosure: true,
      enhancedSafety: true
    }
  });
});

/**
 * Enhanced safety check endpoint
 */
app.post('/api/safety-check', (req, res) => {
  try {
    const { message } = req.body;
    if (!message) {
      return res.status(400).json({ error: 'Message is required', message: 'Ê∂àÊÅØÊòØÂøÖÈúÄÁöÑ' });
    }
    
    const result = checkSafety(message);
    res.json(result);
    
  } catch (error) {
    console.error('[Enhanced API] Error in enhanced safety check:', error);
    res.status(500).json({ error: error.message });
  }
});

/**
 * Test dynamic length control endpoint
 */
app.post('/api/test-length-control', (req, res) => {
  try {
    const { message } = req.body;
    if (!message) {
      return res.status(400).json({ error: 'Message is required', message: 'Ê∂àÊÅØÊòØÂøÖÈúÄÁöÑ' });
    }
    
    const params = decideLengthByUser(message);
    const closureCheck = userWantsToClose(message);
    
    res.json({
      dynamicParams: params,
      wantsToClose: closureCheck,
      messageAnalysis: {
        length: message.length,
        wordCount: message.split(/\s+/).length,
        hasQuestions: message.includes('?') || message.includes('Ôºü'),
        hasEmotionalWords: /feel|emotion|sad|happy|angry|worried|anxious|excited|ÊÑüËßâ|ÊÉÖÊÑü|‰º§ÂøÉ|ÂºÄÂøÉ|ÁîüÊ∞î|ÊãÖÂøÉ|ÁÑ¶Ëôë|ÂÖ¥Â•ã/.test(message.toLowerCase())
      }
    });
    
  } catch (error) {
    console.error('[Enhanced API] Error in length control test:', error);
    res.status(500).json({ error: error.message });
  }
});

// ========================================================================================
// ENHANCED SERVER STARTUP
// ========================================================================================

/**
 * Start the enhanced therapeutic chatbot server
 */
app.listen(PORT, () => {
  console.log('');
  console.log('üß† =========================================');
  console.log('   ENHANCED LUMA THERAPEUTIC CHATBOT');
  console.log('   Â¢ûÂº∫ÁâàÂøÉÁêÜÊîØÊåÅËÅäÂ§©Êú∫Âô®‰∫∫ÂêéÁ´Ø');
  console.log('üß† =========================================');
  console.log('');
  console.log(`üöÄ Server running on http://localhost:${PORT}`);
  console.log(`‚úÖ CORS enabled for development ports`);
  console.log(`üîë Claude API: ${CONFIG.claude.apiKey ? 'Configured' : 'Missing'}`);
  console.log(`üîë Llama API: ${CONFIG.llama.apiKey ? 'Configured' : 'Missing'}`);
  console.log(`üîë Supabase: ${CONFIG.supabase.url ? 'Configured' : 'Missing'}`);
  console.log('');
  console.log('üìã Available Endpoints:');
  console.log('   POST /api/enhanced-therapeutic-chat - Â¢ûÂº∫Ê≤ªÁñóÂØπËØùÂ§ÑÁêÜ');
  console.log('   POST /api/therapeutic-chat - ÂÖºÂÆπÊóßÁâàÊé•Âè£');
  console.log('   POST /api/safety-check - ÂÆâÂÖ®Ê£ÄÊµãÊµãËØï');
  console.log('   POST /api/test-length-control - Âä®ÊÄÅÈïøÂ∫¶ÊéßÂà∂ÊµãËØï');
  console.log('   GET  /health - ÂÅ•Â∫∑Ê£ÄÊü•');
  console.log('');
  console.log('üåü Enhanced Features:');
  console.log('üõ°Ô∏è  Enhanced safety layer (‰∏≠Ëã±ÊñáÂç±Êú∫Ê£ÄÊµã)');
  console.log('üß† Hybrid LLM: Claude Haiku + Llama 3.1 70B');
  console.log('üíæ Memory system: Supabase integration');
  console.log('üìè Dynamic length control (Ëá™ÈÄÇÂ∫îÂõûÂ§çÈïøÂ∫¶)');
  console.log('üëã Intelligent closure detection (Êô∫ËÉΩÂØπËØùÊî∂Â∞æ)');
  console.log('üà≥Ô∏è Chinese + English bilingual support');
  console.log('');
});

// ========================================================================================
// EXPORT FOR TESTING (Enhanced)
// ========================================================================================

export {
  checkSafety,
  decideLengthByUser,
  userWantsToClose,
  generateClosingResponse,
  supabaseMemory,
  callClaudeHaikuEnhanced,
  callLlamaAnalysisEnhanced,
  processEnhancedTherapeuticChat
};